import Head from "next/head";
import React, {useEffect, useState} from "react";
import { Settings } from "lucide-react";
import Canvas from "@/components/Canvas/Canvas";
import SideDrawer from "@/components/SideDrawer/SideDrawer";
import styles from "../styles/Home.module.scss";

interface ColorConfig {
    color: string;
    number: number;
    attractions: { [key: string]: number };
}

export default function Home() {
    const [width, setWidth] = useState(0);
    const [height, setHeight] = useState(0);
    const [isDrawerOpen, setIsDrawerOpen] = useState(true);
    const [colorsConfig, setColorsConfig] = useState<ColorConfig[]>([
        { color: "#ffff00", number: 200, attractions: {} },
        { color: "#ff0000", number: 200, attractions: {} },
        { color: "#00ff00", number: 200, attractions: {} }
    ]);

    useEffect(() => {
        setWidth(window.innerWidth);
        setHeight(window.innerHeight);
        
        // Initialize attraction values for all color pairs (including self-attraction)
        const updatedConfig = colorsConfig.map(config => ({
            ...config,
            attractions: colorsConfig.reduce((acc, otherConfig) => {
                acc[otherConfig.color] = Math.floor((Math.random() * 200) - 100) / 50;
                return acc;
            }, {} as { [key: string]: number })
        }));
        setColorsConfig(updatedConfig);
    }, []);

    const handleDrawerClose = () => {
        setIsDrawerOpen(false);
    };

    const handleDrawerOpen = () => {
        setIsDrawerOpen(true);
    };

    return (
        <>
            <Head>
                <title>Particlism</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/particlism.png"/>
            </Head>
            <div className={styles['particlism-simulator']}>
                <Canvas width={width} height={height} colorsConfig={colorsConfig} setColorsConfig={setColorsConfig}/>
                <SideDrawer 
                    isOpen={isDrawerOpen} 
                    onClose={handleDrawerClose} 
                    colorsConfig={colorsConfig} 
                    setColorsConfig={setColorsConfig}
                />
                {!isDrawerOpen && (
                    <button 
                        className={styles['open-drawer-button']} 
                        onClick={handleDrawerOpen}
                        title="Open simulation controls"
                    >
                        <Settings size={20} />
                    </button>
                )}
            </div>
        </>
    );
}
